#include <Network/ServerPacket/PROTOCOL_BASE_CONNECT_ACK.hpp>
#include <vector>
#include <array>
#include <cstring>
#include <boost/asio.hpp>
#include <boost/array.hpp>
#include <AuthClient.hpp>
#include <Logger.hpp>
#include <Protocol/Acknowledge.hpp>
#include <Network/PacketInterface.hpp>

using boost::asio::ip::address;

PROTOCOL_BASE_CONNECT_ACK::PROTOCOL_BASE_CONNECT_ACK(const uint16_t& sessionSeed, const uint32_t& sessionId) 
: AckPacketInterface(eProtocolPacketAck::BASE_CONNECT_ACK, 157) {
    unsigned char derEncoded[] = { 
        0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 
        0x05, 0x00, 0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xAE, 0xD8, 0xF9, 
        0xAD, 0xE9, 0x14, 0x9F, 0x28, 0xB0, 0x0D, 0xB7, 0x75, 0x4B, 0xD3, 0x2E, 0xE1, 0x91, 0xC6, 0x09, 
        0x3A, 0x97, 0x57, 0x4A, 0x8A, 0x87, 0xCC, 0x03, 0x29, 0x89, 0x1C, 0x35, 0xE6, 0x8F, 0x57, 0x00, 
        0xB2, 0x5A, 0x73, 0xD7, 0x69, 0xD6, 0xA7, 0x91, 0x60, 0xDC, 0xF5, 0x69, 0xA7, 0xE3, 0xB5, 0xDF, 
        0x68, 0xA7, 0x28, 0x66, 0xA5, 0xC7, 0x06, 0x9C, 0x17, 0xCE, 0x43, 0x3E, 0x37, 0xF8, 0x8A, 0x81, 
        0x41, 0x5E, 0x39, 0x7F, 0xB8, 0x47, 0x88, 0x02, 0xC7, 0x9A, 0x3E, 0x17, 0x05, 0x6E, 0xAA, 0x20, 
        0xAC, 0x8B, 0xA1, 0xD9, 0xA0, 0x6C, 0x97, 0x78, 0x47, 0x31, 0xAA, 0xC0, 0x8D, 0x6A, 0xB3, 0x69, 
        0xDC, 0x3B, 0xD3, 0x7C, 0x81, 0xBE, 0x11, 0x1C, 0xDB, 0xA5, 0x8E, 0x2B, 0xE5, 0xF1, 0x14, 0x1A, 
        0x92, 0x68, 0xFC, 0xCE, 0x66, 0x1B, 0x74, 0x30, 0xC9, 0x34, 0x41, 0xDE, 0x8D, 0x02, 0x03, 0x01, 
        0x00, 0x01
    };

    std::vector<uint8_t> numArray1(128);
    std::memcpy(numArray1.data(), derEncoded + 29, numArray1.size());
    std::vector<uint8_t> numArray2 = { 1, 0, 0x11 };
    short num1 = 2;
    int num2 = numArray1.size() + numArray2.size() + num1;

    Write<uint16_t>(2);
    Write<uint8_t>(10); //might be something
    for (uint8_t index = 0; index < 10; ++index)
        Write<uint8_t>(0);

    Write<uint16_t>(num2);
    Write<uint16_t>(numArray1.size());
    Write(numArray1.data(), numArray1.size());
    Write(numArray2.data(), numArray2.size());
    Write<uint8_t>(3);
    Write<uint16_t>(24);
    Write<uint16_t>(sessionSeed);
    Write<uint32_t>(sessionId);

    AckPacketInterface::Pack();
}